import { constants, WalletAccount, RpcProvider } from 'starknet';
import { WALLET_API, StarknetWindowObject } from '@starknet-io/types-js';
import { Chain, WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { NetworkConfiguration } from '@dynamic-labs/sdk-api-core';
import { WalletSchema } from '@dynamic-labs/wallet-book';
import { Logger } from '@dynamic-labs/logger';
import { PromptOptions, PromptResult, StarknetWalletConnectorProps, WalletData } from './types';
import { StarknetWallet } from './wallet';
export declare abstract class StarknetWalletConnector extends WalletConnectorBase<typeof StarknetWallet> {
    /** the name of the connector, e.g. "Argent X", "Braavos" */
    name: string;
    /**
     * the string identifier of the connector as surfaced by `get-starknet-core` or `starknetkit`
     * this is used to prompt the correct extension, e.g. the argentX browser extension
     */
    id: string;
    ChainWallet: typeof StarknetWallet;
    connectedChain: Chain;
    supportedChains: Chain[];
    handleAccountChange: WALLET_API.AccountChangeEventHandler | undefined;
    handleNetworkChange: WALLET_API.NetworkChangeEventHandler | undefined;
    switchNetworkOnlyFromWallet: boolean;
    /** the starknet networks configuration from redcoast */
    starknetNetworks: NetworkConfiguration[];
    /** required for metamask snap integration as MM snaps don't have event listeners */
    canSetEventListeners: boolean;
    /**
     * used to obtain a WalletAccount to interact with the wallet
     */
    wallet: StarknetWindowObject | undefined;
    /** The wallet metadata. Replace with _metadata once inAppBrowser is migrated */
    protected walletBookWallet: WalletSchema;
    /**
     * used to track wallet state (account and chain)
     */
    walletData: WalletData | undefined;
    logger: Logger;
    constructor(name: string, id: string, opts: StarknetWalletConnectorProps);
    /** implementing classes should use starknetkit or get-starknet-core functions here */
    abstract prompt(options: PromptOptions): Promise<PromptResult>;
    connect(): Promise<void>;
    getAddress(): Promise<string | undefined>;
    /**
     * returns starknet wallet network id
     */
    getNetwork(): Promise<string | undefined>;
    getBalance(address: string): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    getWalletAccount(): Promise<WalletAccount | undefined>;
    getProvider(): Promise<RpcProvider>;
    isInstalledOnBrowser(): boolean;
    endSession(): Promise<void>;
    setupEventListeners(): void;
    teardownEventListeners(): Promise<void>;
    protected resolveRpcUrl(): Promise<string | undefined>;
    protected mapChainIdToNetworkName(chainIdOrNetworkName: string): constants.NetworkName | undefined;
}
export type StarknetWalletConnectorType = StarknetWalletConnector;
