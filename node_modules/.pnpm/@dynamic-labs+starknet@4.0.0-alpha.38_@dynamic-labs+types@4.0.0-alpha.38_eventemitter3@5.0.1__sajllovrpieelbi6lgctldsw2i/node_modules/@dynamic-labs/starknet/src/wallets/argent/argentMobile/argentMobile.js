'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { connect } from 'starknetkit';
import { isInArgentMobileAppBrowser, ArgentMobileBaseConnector } from 'starknetkit/argentMobile';
import { constants } from 'starknet';
import { ArgentBase } from '../base.js';

class ArgentMobile extends ArgentBase {
    constructor(opts) {
        super('Argent X - Mobile', 'argentXMobile', opts);
        this.canConnectViaCustodialService = true;
        this.overrideKey = 'argentxmobile';
        this.projectId = opts.projectId;
        this.appName = opts.appName;
        this.appLogoUrls = opts.appLogoUrl
            ? [opts.appLogoUrl]
            : undefined;
    }
    isInstalledOnBrowser() {
        return false;
    }
    filter() {
        if (super.filter()) {
            return !isInArgentMobileAppBrowser();
        }
        return false;
    }
    prompt(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { connectorData, wallet } = yield connect({
                connectors: [
                    new ArgentMobileBaseConnector({
                        chainId: this.getNetworkName() || constants.NetworkName.SN_MAIN,
                        dappName: this.appName,
                        icons: this.appLogoUrls,
                        projectId: this.projectId,
                        rpcUrl: this.getNodeUrl(),
                        url: window.location.hostname,
                    }),
                ],
                modalMode: options.silently ? 'neverAsk' : 'canAsk',
            });
            return {
                data: {
                    account: connectorData === null || connectorData === void 0 ? void 0 : connectorData.account,
                    chainId: connectorData === null || connectorData === void 0 ? void 0 : connectorData.chainId,
                },
                wallet: wallet !== null && wallet !== void 0 ? wallet : undefined,
            };
        });
    }
    getNetworkName() {
        const [network] = this.starknetNetworks;
        if (!network) {
            return undefined;
        }
        return this.mapChainIdToNetworkName(network.chainId);
    }
    getNodeUrl() {
        var _a;
        const [network] = this.starknetNetworks;
        if (!network) {
            return undefined;
        }
        return ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
    }
}

export { ArgentMobile };
