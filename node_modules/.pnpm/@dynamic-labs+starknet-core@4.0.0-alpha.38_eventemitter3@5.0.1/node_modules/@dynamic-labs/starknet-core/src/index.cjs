'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var starknet = require('starknet');
var assertPackageVersion = require('@dynamic-labs/assert-package-version');
var rpcProviders = require('@dynamic-labs/rpc-providers');
var _package = require('../package.cjs');

/* eslint-disable @typescript-eslint/no-namespace */
assertPackageVersion.assertPackageVersion('@dynamic-labs/starknet-core', _package.version);
rpcProviders.ChainRpcProviders.getStarknetRpcProviderByChainId = (config, chainId) => {
    var _a;
    const rpcProviders$1 = rpcProviders.ChainRpcProviders.getProviders(config);
    const provider = (_a = rpcProviders$1['starknet']) === null || _a === void 0 ? void 0 : _a.find((rpcProvider) => rpcProvider.chainId === chainId);
    return provider;
};
rpcProviders.ChainRpcProviders.registerStarknetProviders = () => {
    rpcProviders.ChainRpcProviders.registerChainProviders(rpcProviders.ProviderChain.STARKNET, (config) => {
        const rpcProviders$1 = {};
        if (config === null || config === void 0 ? void 0 : config.starknet) {
            const networks = config.starknet;
            rpcProviders$1.starknet =
                rpcProviders.ChainRpcProviders.createProviderFromConfig(networks);
        }
        return rpcProviders$1.starknet;
    });
};
rpcProviders.ChainRpcProviders.createProviderFromConfig = (networks) => networks.map((network) => {
    var _a;
    const rpcUrl = ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
    const provider = new starknet.RpcProvider({ nodeUrl: rpcUrl });
    return {
        chainId: network.chainId.toString(),
        chainName: network.name,
        provider,
    };
});

Object.keys(rpcProviders).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return rpcProviders[k]; }
  });
});
