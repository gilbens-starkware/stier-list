'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
var useEmbeddedWallet = require('../useEmbeddedWallet/useEmbeddedWallet.cjs');
require('@dynamic-labs/sdk-api-core');
require('@dynamic-labs/wallet-connector-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
var useLocalStorage = require('../../../shared/utils/hooks/useLocalStorage/useLocalStorage.cjs');
require('../../../shared/consts/index.cjs');
var useDynamicEvents = require('../events/useDynamicEvents/useDynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
var findEmbeddedWalletFromVerifiedCredentials = require('../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../store/state/environmentId.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
var LoadingContext = require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var WalletContext = require('../../../context/WalletContext/WalletContext.cjs');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useEmbeddedReveal = require('../useEmbeddedReveal/useEmbeddedReveal.cjs');
require('../../../../index.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');

let acknowledgedExportPrompt = false;
const useSyncEmbeddedWalletFlow = () => {
    const { projectSettings, user, primaryWalletId, walletConnectorOptions, primaryWallet, setShowAuthFlow, } = useInternalDynamicContext.useInternalDynamicContext();
    const { isLoadingEmbeddedWallet } = WalletContext.useWalletContext();
    const { loading: globalLoading } = LoadingContext.useLoadingContext();
    const { initExportProcess } = useEmbeddedReveal.useEmbeddedReveal();
    const [wasShownExportPrompt, setWasShownExportPrompt] = useLocalStorage.useLocalStorage(`dynamic_export_prompt-${user === null || user === void 0 ? void 0 : user.userId}`, false, (data) => Boolean(data));
    const { createEmbeddedWallet, shouldAutoCreateEmbeddedWallet, shouldPromptForKeyExport, } = useEmbeddedWallet.useEmbeddedWallet();
    const triggeredCreate = React.useRef(false);
    const handleAcknowledgeExportPrompt = React.useCallback((value = true) => {
        acknowledgedExportPrompt = value;
        setWasShownExportPrompt(value);
    }, [setWasShownExportPrompt]);
    useDynamicEvents.useInternalDynamicEvents('logout', () => {
        triggeredCreate.current = false;
        acknowledgedExportPrompt = false;
    });
    // this is used to trigger createEmbeddedWallet
    // when user didn't create a passkey after login,
    // we force them to created it before they can use the app
    // ** It must be an useEffect because some of the dependencies are async
    React.useEffect(() => {
        const syncEmbeddedWallet = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            const isNewUser = user === null || user === void 0 ? void 0 : user.newUser;
            if (shouldSyncCreateWallet) {
                triggeredCreate.current = true;
                try {
                    yield createEmbeddedWallet();
                }
                catch (error) {
                    if (error instanceof utils.EmbeddedWalletException) {
                        logger.logger.debug('Error creating embedded wallet', error);
                    }
                    else {
                        logger.logger.error('Error creating embedded wallet', error);
                    }
                    setShowAuthFlow(false);
                }
            }
            if (shouldSyncPromptKeyExport &&
                isNewUser &&
                findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(user) &&
                primaryWallet) {
                try {
                    setShowAuthFlow(true);
                    yield initExportProcess(true, true);
                }
                catch (error) {
                    logger.logger.error('Error initializing embedded wallet export', error);
                    setShowAuthFlow(false);
                }
            }
        });
        const shouldCreateWallet = shouldAutoCreateEmbeddedWallet();
        const shouldSyncCreateWallet = shouldCreateWallet && !triggeredCreate.current;
        if (wasShownExportPrompt && !acknowledgedExportPrompt)
            acknowledgedExportPrompt = true;
        const shouldPromptKeyExport = shouldPromptForKeyExport();
        const shouldSyncPromptKeyExport = shouldPromptKeyExport && !acknowledgedExportPrompt;
        const shouldSyncEmbeddedWallet = shouldSyncCreateWallet || shouldSyncPromptKeyExport;
        if (!shouldSyncEmbeddedWallet ||
            !user ||
            !projectSettings ||
            !walletConnectorOptions.length || // no connectors to use for the embedded wallet
            isLoadingEmbeddedWallet || // already has a wallet
            globalLoading // this will be true if auth is in progress
        ) {
            return;
        }
        syncEmbeddedWallet();
    }, [
        user,
        projectSettings,
        primaryWalletId,
        createEmbeddedWallet,
        isLoadingEmbeddedWallet,
        walletConnectorOptions,
        globalLoading,
        shouldAutoCreateEmbeddedWallet,
        setShowAuthFlow,
        initExportProcess,
        primaryWallet,
        shouldPromptForKeyExport,
        setWasShownExportPrompt,
        handleAcknowledgeExportPrompt,
        wasShownExportPrompt,
    ]);
    return {
        acknowledgedExportPrompt,
        handleAcknowledgeExportPrompt,
    };
};

exports.useSyncEmbeddedWalletFlow = useSyncEmbeddedWalletFlow;
