'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var OverlayCardBase = require('../OverlayCardBase/OverlayCardBase.cjs');
require('../OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
var IconButton = require('../IconButton/IconButton.cjs');
var ModalHeader = require('../ModalHeader/ModalHeader.cjs');
var Typography = require('../Typography/Typography.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../context/ViewContext/ViewContext.cjs');
var close = require('../../shared/assets/close.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var classNames = require('../../utils/functions/classNames/classNames.cjs');

const CloseContext = React.createContext(undefined);
/** Default header component with close icon */
const Header = ({ children, closeDisabled, }) => {
    const onClose = React.useContext(CloseContext);
    const closeButton = (jsxRuntime.jsx(IconButton.IconButton, { onClick: onClose, type: 'button', id: 'close-button', disabled: closeDisabled, "data-testid": 'close-button', children: jsxRuntime.jsx(close.ReactComponent, {}) }));
    return (jsxRuntime.jsx(ModalHeader.ModalHeader, { trailing: closeButton, children: jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'title', color: 'primary', children: children }) }));
};
/** Styled content section */
const Content = ({ children, className, removePadding, }) => (jsxRuntime.jsx("div", { className: classNames.classNames('overlay-card__content', { 'overlay-card__content-p0': removePadding }, className), "data-testid": 'overlay-content', children: children }));
const OverlayCard = ({ children, isOpen, onClose, className, style, }) => (jsxRuntime.jsx(CloseContext.Provider, { value: onClose, children: jsxRuntime.jsx(OverlayCardBase.OverlayCardBase, { isOpen: isOpen, onClickOverlay: onClose, className: className, style: style, children: children }) }));
OverlayCard.Header = Header;
OverlayCard.Content = Content;

exports.OverlayCard = OverlayCard;
