'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
var localStorage = require('../../constants/localStorage.cjs');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
var useLocalStorage = require('../../../shared/utils/hooks/useLocalStorage/useLocalStorage.cjs');
require('../../../shared/consts/index.cjs');
var usePromise = require('../usePromise/usePromise.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

const useDeviceFingerprint = () => {
    const [lsFingerprint, setLsFingerprint] = useLocalStorage.useLocalStorage(localStorage.DEVICE_FINGERPRINT, undefined);
    const fingerprintExists = lsFingerprint !== '' && lsFingerprint !== undefined ? true : false;
    usePromise.usePromise(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (typeof window === 'undefined' || typeof document === 'undefined')
            return undefined;
        return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@thumbmarkjs/thumbmarkjs')); })
            .then((thumbmark) => thumbmark.getFingerprint())
            .catch(() => undefined);
    }), {
        deps: [fingerprintExists],
        enabled: !fingerprintExists,
        initialData: undefined,
        onResolve: setLsFingerprint,
        retries: 2,
    });
    const consumeDeviceFingerprint = React.useCallback(() => {
        const deviceFingerprint = lsFingerprint;
        return deviceFingerprint;
    }, [lsFingerprint]);
    return {
        consumeDeviceFingerprint: () => consumeDeviceFingerprint(),
    };
};

exports.useDeviceFingerprint = useDeviceFingerprint;
