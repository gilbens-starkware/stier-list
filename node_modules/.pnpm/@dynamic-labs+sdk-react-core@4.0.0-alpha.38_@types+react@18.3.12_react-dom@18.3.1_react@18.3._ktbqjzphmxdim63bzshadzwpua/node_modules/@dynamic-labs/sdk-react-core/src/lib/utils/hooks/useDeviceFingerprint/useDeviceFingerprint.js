'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import { DEVICE_FINGERPRINT } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import { useLocalStorage } from '../../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import '../../../shared/consts/index.js';
import { usePromise } from '../usePromise/usePromise.js';

const useDeviceFingerprint = () => {
    const [lsFingerprint, setLsFingerprint] = useLocalStorage(DEVICE_FINGERPRINT, undefined);
    const fingerprintExists = lsFingerprint !== '' && lsFingerprint !== undefined ? true : false;
    usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        if (typeof window === 'undefined' || typeof document === 'undefined')
            return undefined;
        return import('@thumbmarkjs/thumbmarkjs')
            .then((thumbmark) => thumbmark.getFingerprint())
            .catch(() => undefined);
    }), {
        deps: [fingerprintExists],
        enabled: !fingerprintExists,
        initialData: undefined,
        onResolve: setLsFingerprint,
        retries: 2,
    });
    const consumeDeviceFingerprint = useCallback(() => {
        const deviceFingerprint = lsFingerprint;
        return deviceFingerprint;
    }, [lsFingerprint]);
    return {
        consumeDeviceFingerprint: () => consumeDeviceFingerprint(),
    };
};

export { useDeviceFingerprint };
