'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var injected = require('./injected.cjs');

const filteredStarknetWalletKeysOverrides = [
    // TODO(starknet-v6): Remove once these wallets support v6
    'bitgetstarknet',
];
const fetchStarknetInjectedWalletConnectors = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([key, wallet]) => {
        var _a;
        return ((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'starknet')) &&
            !filteredStarknetWalletKeysOverrides.includes(key);
    })
        .map(([key, wallet]) => {
        var _a, _b, _c;
        const name = wallet.shortName || wallet.name;
        const walletConnectorFallback = Boolean(wallet.walletConnect);
        const id = (_c = (_b = (_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a[0].windowLocations) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : key;
        return class extends injected.Injected {
            constructor(props) {
                super(name, id, Object.assign({ name, overrideKey: key, walletBookWallet: wallet, walletConnectorFallback }, props));
            }
        };
    });
};

exports.fetchStarknetInjectedWalletConnectors = fetchStarknetInjectedWalletConnectors;
