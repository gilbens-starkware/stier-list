'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { DynamicError } from '@dynamic-labs/utils';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../events/dynamicEvents.js';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgDeleteEmbeddedHero } from '../../shared/assets/delete-embedded-hero.js';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import { getDeleteEmbeddedWalletsRequest, deleteEmbeddedWallets } from '../../data/api/embeddedWallets/embeddedWallets.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../store/state/environmentId.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../utils/functions/compareChains/compareChains.js';
import '../../context/WalletContext/WalletContext.js';
import { useSmartWallets } from '../../utils/hooks/useSmartWallets/useSmartWallets.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/walletConnectorOptions.js';
import { Typography } from '../../components/Typography/Typography.js';
import '../../context/FooterAnimationContext/index.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../components/IconButton/IconButton.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import { ErrorContainer } from '../../components/ErrorContainer/ErrorContainer.js';
import { TypographyButton } from '../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../store/state/sendBalances.js';
import '../../components/Input/Input.js';
import '../../components/OverlayCard/OverlayCard.js';
import '../TransactionConfirmationView/TransactionConfirmationView.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { getProperErrorMessage } from '../../modals/SignMessageConfirmationModal/getProperErrorMessage.js';
import '../../../index.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { Checkbox } from '../../components/Checkbox/Checkbox.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../store/state/tokenBalances.js';
import '../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'qrcode';

const EmbeddedDeleteView = () => {
    const { primaryWallet, setShowAuthFlow, environmentId, handleLogOut } = useInternalDynamicContext();
    const [isAcknowledgementChecked, setIsAcknowledgementChecked] = useState(false);
    const [error, setError] = useState(undefined);
    const { t } = useTranslation();
    const [isLoading, setIsLoading] = useState(false);
    const { isSmartWallet, getEOAWallet } = useSmartWallets();
    const errorText = useMemo(() => {
        if (!error) {
            return undefined;
        }
        if (error instanceof DynamicError) {
            return error.message;
        }
        try {
            return getProperErrorMessage(error);
        }
        catch (e) {
            return 'An unexpected error occured while deleting your embedded wallets.';
        }
    }, [error]);
    const handleDeleteEmbeddedWallets = () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!primaryWallet) {
            return;
        }
        setIsLoading(true);
        try {
            const deleteEmbeddedWalletsRawPayload = yield getDeleteEmbeddedWalletsRequest({
                environmentId,
            });
            const connector = isSmartWallet(primaryWallet)
                ? (_a = getEOAWallet(primaryWallet)) === null || _a === void 0 ? void 0 : _a.connector
                : primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
            const signedDeleteWalletsRequest = yield connector.stampDeleteSubOrganizationRequest({
                request: deleteEmbeddedWalletsRawPayload,
            });
            yield deleteEmbeddedWallets({
                deleteEmbeddedWalletsRequest: signedDeleteWalletsRequest,
                environmentId,
            });
            handleLogOut();
        }
        catch (error) {
            setError(error);
        }
        finally {
            setIsLoading(false);
        }
    });
    const contentHeader = (jsx("div", { children: jsx("div", { className: 'embedded-delete-view__body__description', children: jsx("div", { className: 'embedded-delete-view__header', children: jsx(SvgDeleteEmbeddedHero, {}) }) }) }));
    return (jsxs("div", { className: 'embedded-delete-view', children: [jsx("div", { className: 'embedded-delete-view__body', children: contentHeader }), errorText && jsx(ErrorContainer, { children: errorText }), jsxs("div", { className: 'embedded-delete-view__body__card', children: [jsx(Typography, { variant: 'body_normal', color: 'primary', style: { letterSpacing: '-0.15px' }, copykey: 'dyn_embedded_delete.description_1', children: t('dyn_embedded_delete.description_1') }), jsx(Typography, { variant: 'body_normal', color: 'primary', style: { fontWeight: 'bold', letterSpacing: '-0.15px' }, copykey: 'dyn_embedded_delete.description_2', children: t('dyn_embedded_delete.description_2') })] }), jsx("div", { className: 'embedded-delete-view__body__confirm_card', children: jsxs("button", { className: 'embedded-delete-view__body__card__acknowledgement', "data-testid": 'embedded-delete-checkbox', onClick: () => setIsAcknowledgementChecked(!isAcknowledgementChecked), children: [jsx("div", { children: jsx(Checkbox, { checked: isAcknowledgementChecked, className: 'embedded-delete-view__body__card__statement__checkbox', id: 'embedded-reveal-checkbox-1' }) }), jsx("div", { children: jsx(Typography, { variant: 'body_small', color: 'primary', style: { letterSpacing: '-0.15px' }, copykey: 'dyn_embedded_delete.acknowledgement', children: t('dyn_embedded_delete.acknowledgement') }) })] }) }), jsxs("div", { className: 'embedded-delete-view__body__cta_button_wrapper', children: [jsx(TypographyButton, { buttonPadding: 'large', buttonVariant: 'primary', typographyProps: {
                            color: 'inherit',
                        }, onClick: () => setShowAuthFlow(false), disabled: false, loading: false, dataTestId: 'embedded-delete-cancel-button', copykey: 'dyn_embedded_delete.cancel_button', buttonClassName: 'embedded-delete-view__body__button', children: t('dyn_embedded_delete.cancel_button') }), jsx(TypographyButton, { buttonPadding: 'large', buttonVariant: 'brand-primary', typographyProps: {
                            color: 'inherit',
                            style: {
                                fontSize: '13px',
                            },
                        }, onClick: handleDeleteEmbeddedWallets, disabled: isLoading || !isAcknowledgementChecked, loading: isLoading, dataTestId: 'embedded-delete-action-button', copykey: 'dyn_embedded_delete.action_button', buttonClassName: 'embedded-delete-view__body__button', children: t('dyn_embedded_delete.action_button') })] })] }));
};

export { EmbeddedDeleteView };
