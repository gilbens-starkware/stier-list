import { WalletClient, Transport, Account, Chain as ViemChain } from 'viem';
import { EvmNetwork } from '@dynamic-labs/types';
import { WalletSchema } from '@dynamic-labs/wallet-book';
import { EthereumWalletConnector } from '@dynamic-labs/ethereum-core';
import { EthProviderHelper } from '../ethProviderHelper';
import { IEthereum } from '../types';
export declare abstract class InjectedWalletBase extends EthereumWalletConnector {
    publicAddress: string | undefined;
    walletConnectorFallback: boolean;
    ethProviderHelper: EthProviderHelper | undefined;
    _wallet: WalletSchema | undefined;
    get wallet(): {
        name: string;
        brand?: {
            alt?: string | undefined;
            primaryColor?: string | undefined;
            spriteId?: string | undefined;
        } | undefined;
        chainGroup?: string | undefined;
        chains?: string[] | undefined;
        desktop?: {
            chromeId?: string | undefined;
            edgeId?: string | undefined;
            firefoxId?: string | undefined;
            native?: string | undefined;
            operaId?: string | undefined;
            safariId?: string | undefined;
            universal?: string | undefined;
        } | undefined;
        eip6963Config?: {
            rdns: string;
        } | undefined;
        filterFromWalletConnect?: boolean | undefined;
        group?: string | undefined;
        hardwareWallets?: string[] | undefined;
        injectedConfig?: {
            chain: string;
            extensionLocators: {
                value: boolean;
                flag: string;
            }[];
            providerInterface?: string | undefined;
            walletStandard?: {
                features: string[];
                name: string;
                providerId?: string | undefined;
            } | undefined;
            walletStandardLocators?: {
                name: string;
                locator: string;
            }[] | undefined;
            windowLocations?: string[] | undefined;
        }[] | undefined;
        mobile?: {
            android?: string | null | undefined;
            androidId?: string | undefined;
            inAppBrowser?: string | null | undefined;
            ios?: string | null | undefined;
            iosId?: string | undefined;
            native?: string | undefined;
            universal?: string | undefined;
        } | undefined;
        mobileExperience?: "in-app-browser" | "redirect" | undefined;
        shortName?: string | undefined;
        showOnlyIfInstalled?: boolean | undefined;
        switchNetworkOnlyFromWallet?: boolean | undefined;
        walletConnect?: {
            sdks?: string[] | undefined;
        } | undefined;
        walletGroup?: string | undefined;
        walletLimitations?: {
            browserExtension?: {
                unsupportedEvents?: string[] | undefined;
                unsupportedMethods?: string[] | undefined;
            } | undefined;
            mobile?: {
                unsupportedEvents?: string[] | undefined;
                unsupportedMethods?: string[] | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
    getEthProviderHelper(): EthProviderHelper | undefined;
    getMobileOrInstalledWallet(): InjectedWalletBase;
    findProvider(): IEthereum | undefined;
    setupEventListeners(): void;
    getWalletClient(chainId?: string): WalletClient<Transport, ViemChain, Account> | undefined;
    isInstalledOnBrowser(): boolean;
    getAddress(): Promise<string | undefined>;
    connect(): Promise<void>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    proveOwnership(address: string, messageToSign: string): Promise<string | undefined>;
    endSession(): Promise<void>;
    providerSwitchNetwork({ network, provider, }: {
        network: EvmNetwork;
        provider: WalletClient;
    }): Promise<void>;
}
