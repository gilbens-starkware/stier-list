'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var utils = require('@dynamic-labs/utils');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var storeAuthTokenAndUser = require('../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.cjs');
require('../../../store/state/user/user.cjs');
var api = require('../api.cjs');

const createTurnkeyEmbeddedWallet = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ attestation, challenge, environmentId, chains = [sdkApiCore.EmbeddedWalletChainEnum.Evm], passkeyAlias, }) {
    const embeddedWallets = [
        {
            chains,
            embeddedWalletProvider: sdkApiCore.EmbeddedWalletProviderEnum.Turnkeyhd,
            isAuthenticatorAttached: false,
            passkeyAlias,
        },
    ];
    if (attestation && challenge) {
        embeddedWallets[0] = Object.assign(Object.assign({}, embeddedWallets[0]), { embeddedWalletSpecificOpts: {
                attestation,
                challenge,
            }, isAuthenticatorAttached: true });
    }
    try {
        const response = yield api.sdkApi().createEmbeddedWallets({
            createEmbeddedWalletsRequest: {
                embeddedWallets,
            },
            environmentId,
        });
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        logger.logger.error('Error creating embedded wallet: ', e);
        return undefined;
    }
});
const initEmbeddedWalletSession = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ authenticatorType, walletId, publicKey, environmentId, }) {
    if (authenticatorType === 'passkey') {
        return api.sdkApi().initPasskeyRecovery({
            environmentId,
            initPasskeyRecoveryRequest: {
                turnkeyRecoveryTargetPublicKey: publicKey,
                walletId,
            },
        });
    }
    return api.sdkApi().initEmailAuth({
        environmentId,
        initEmailAuthRequest: {
            turnkeyEmailAuthTargetPublicKey: publicKey,
            walletId,
        },
    });
});
const completePasskeyRecovery = (_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ walletId, attestation, challenge, environmentId, }) {
    try {
        const response = yield api.sdkApi().completePasskeyRecovery({
            completePasskeyRecoveryRequest: {
                attestation,
                challenge,
                walletId,
            },
            environmentId,
        });
        return storeAuthTokenAndUser.storeAuthTokenAndUser(response);
    }
    catch (e) {
        logger.logger.error('Error completing passkey recovery: ', e);
        return undefined;
    }
});
const updatePasskeyRecoveryEmail = (_d) => _tslib.__awaiter(void 0, [_d], void 0, function* ({ environmentId, updateRecoveryEmailRequest, }) {
    try {
        yield api.sdkApi().updateEmbeddedWalletRecoveryEmail({
            environmentId,
            updateRecoveryEmailRequest,
        });
    }
    catch (e) {
        logger.logger.error('Error while trying to update recovery email: ', e);
        throw new utils.DynamicError('Error updating recovery email');
    }
});
const getUserPasskeys = (_e) => _tslib.__awaiter(void 0, [_e], void 0, function* ({ environmentId, }) {
    try {
        const data = yield api.sdkApi().getUserPasskeys({
            environmentId,
        });
        return data;
    }
    catch (e) {
        logger.logger.error(e);
        return {
            count: 0,
            passkeys: [],
        };
    }
});
const updateUserPasskey = (_f) => _tslib.__awaiter(void 0, [_f], void 0, function* ({ environmentId, id, alias, }) {
    try {
        const data = yield api.sdkApi().updatePasskey({
            environmentId,
            updateUserPasskeyRequest: { alias, id },
        });
        return data;
    }
    catch (e) {
        logger.logger.error(e);
        return undefined;
    }
});
const exportEmbeddedWallet = (_g) => _tslib.__awaiter(void 0, [_g], void 0, function* ({ environmentId, walletId, activityId, }) {
    try {
        const data = yield api.sdkApi().embeddedWalletExport({
            activityId,
            environmentId,
            walletId,
        });
        return data;
    }
    catch (e) {
        logger.logger.error(e);
        return { exportBundle: '' };
    }
});
const getWalletAuthToken = (_h) => _tslib.__awaiter(void 0, [_h], void 0, function* ({ environmentId, type, }) {
    try {
        const authToken = yield api.sdkApi().getAuthToken({
            environmentId,
            type,
        });
        return authToken.token;
    }
    catch (e) {
        return undefined;
    }
});
const getEmbeddedWalletBackup = (_j) => _tslib.__awaiter(void 0, [_j], void 0, function* ({ environmentId, }) {
    try {
        const response = yield api.sdkApi().getEmbeddedWalletBackups({
            environmentId,
        });
        return response.secret;
    }
    catch (e) {
        return undefined;
    }
});
const getEmbeddedWalletPasscode = (_k) => _tslib.__awaiter(void 0, [_k], void 0, function* ({ environmentId, }) {
    try {
        const response = yield api.sdkApi().getEmbeddedWalletPasscode({
            environmentId,
        });
        return response.secret;
    }
    catch (e) {
        return undefined;
    }
});
const claimEmbeddedWallet = (_l) => _tslib.__awaiter(void 0, [_l], void 0, function* ({ environmentId, walletId, }) {
    var _m, _o;
    try {
        const response = yield api.sdkApi().claimEmbeddedWallet({
            embeddedWalletPasscodeClaimRequest: {
                walletId,
            },
            environmentId,
        });
        storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return response;
    }
    catch (e) {
        logger.logger.error(e);
        // request failed, return unknown error
        const data = yield ((_m = e === null || e === void 0 ? void 0 : e.json) === null || _m === void 0 ? void 0 : _m.call(e));
        if (!((_o = data === null || data === void 0 ? void 0 : data.error) === null || _o === void 0 ? void 0 : _o.code)) {
            return { code: 'unknown_error' };
        }
        throw e;
    }
});
const registerSessionKey = (_p) => _tslib.__awaiter(void 0, [_p], void 0, function* ({ environmentId, publicKey, prevSessionKeySignature, }) {
    let response;
    try {
        response = yield api.sdkApi().registerSessionKey({
            environmentId,
            registerSessionKeyRequest: { prevSessionKeySignature, publicKey },
        });
    }
    catch (e) {
        logger.logger.error('Error registering session key', e);
        if ((e === null || e === void 0 ? void 0 : e.status) === 422) {
            const errorJson = yield e.json();
            if (errorJson.code === sdkApiCore.UnprocessableEntityErrorCode.InvalidSessionPublicKey) {
                throw new utils.InvalidEmbeddedWalletSessionKeyError(errorJson.error);
            }
        }
        throw e;
    }
    return response;
});
const getCreateEmbeddedWalletAccountRequest = (_q) => _tslib.__awaiter(void 0, [_q], void 0, function* ({ environmentId, chain, }) {
    try {
        const response = yield api.sdkApi().getCreateWalletAccountRequest({
            chain,
            environmentId,
        });
        return response;
    }
    catch (e) {
        logger.logger.error('Error fetching create embedded wallet account request: ', e);
        throw new utils.DynamicError('Error fetching create embedded wallet account request');
    }
});
const createEmbeddedWalletAccount = (_r) => _tslib.__awaiter(void 0, [_r], void 0, function* ({ environmentId, createEmbeddedWalletAccountRequest, }) {
    try {
        const response = yield api.sdkApi().createWalletAccount({
            createWalletAccountRequest: {
                turnkeySignedRequest: createEmbeddedWalletAccountRequest,
            },
            environmentId,
        });
        return response;
    }
    catch (e) {
        logger.logger.error('Error creating embedded wallet account: ', e);
        throw new utils.DynamicError('Error creating embedded wallet account');
    }
});
const getDeleteEmbeddedWalletsRequest = (_s) => _tslib.__awaiter(void 0, [_s], void 0, function* ({ environmentId, }) {
    try {
        const response = yield api.sdkApi().getEmbeddedWalletsDeleteRequest({
            environmentId,
        });
        return response;
    }
    catch (e) {
        logger.logger.error('Error fetching delete embedded wallets request: ', e);
        throw new utils.DynamicError('Error fetching delete embedded wallets request');
    }
});
const deleteEmbeddedWallets = (_t) => _tslib.__awaiter(void 0, [_t], void 0, function* ({ environmentId, deleteEmbeddedWalletsRequest, }) {
    try {
        const response = yield api.sdkApi().deleteEmbeddedWallets({
            deleteEmbeddedWalletsRequest: {
                turnkeySignedRequest: deleteEmbeddedWalletsRequest,
            },
            environmentId,
        });
        return response;
    }
    catch (e) {
        logger.logger.error('Error deleting embedded wallets: ', e);
        throw new utils.DynamicError('Error deleting embedded wallets');
    }
});

exports.claimEmbeddedWallet = claimEmbeddedWallet;
exports.completePasskeyRecovery = completePasskeyRecovery;
exports.createEmbeddedWalletAccount = createEmbeddedWalletAccount;
exports.createTurnkeyEmbeddedWallet = createTurnkeyEmbeddedWallet;
exports.deleteEmbeddedWallets = deleteEmbeddedWallets;
exports.exportEmbeddedWallet = exportEmbeddedWallet;
exports.getCreateEmbeddedWalletAccountRequest = getCreateEmbeddedWalletAccountRequest;
exports.getDeleteEmbeddedWalletsRequest = getDeleteEmbeddedWalletsRequest;
exports.getEmbeddedWalletBackup = getEmbeddedWalletBackup;
exports.getEmbeddedWalletPasscode = getEmbeddedWalletPasscode;
exports.getUserPasskeys = getUserPasskeys;
exports.getWalletAuthToken = getWalletAuthToken;
exports.initEmbeddedWalletSession = initEmbeddedWalletSession;
exports.registerSessionKey = registerSessionKey;
exports.updatePasskeyRecoveryEmail = updatePasskeyRecoveryEmail;
exports.updateUserPasskey = updateUserPasskey;
