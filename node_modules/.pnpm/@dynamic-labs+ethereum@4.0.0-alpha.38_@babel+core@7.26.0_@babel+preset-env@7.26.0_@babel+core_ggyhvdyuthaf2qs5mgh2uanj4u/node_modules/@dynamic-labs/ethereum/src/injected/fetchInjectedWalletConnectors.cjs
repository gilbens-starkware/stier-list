'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var InjectedWalletBase = require('./InjectedWalletBase.cjs');
var PhantomEvm = require('./PhantomEvm.cjs');
var ExodusEvm = require('./ExodusEvm.cjs');

const injectedWalletOverrides = [
    PhantomEvm.PhantomEvm,
    ExodusEvm.ExodusEvm,
];
const walletsWithCustomConnectors = [
    'phantomevm',
    'coinbase',
    'exodusevm',
    'abstract',
    'metamask',
    'edenonline',
    'intersend',
];
const fetchInjectedWalletConnector = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([key, wallet]) => {
        var _a;
        return ((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'evm')) &&
            !walletsWithCustomConnectors.includes(key);
    })
        .map(([key, wallet]) => {
        const { shortName } = wallet;
        const name = shortName || wallet.name;
        const walletConnectorFallback = Boolean(wallet.walletConnect);
        return class extends InjectedWalletBase.InjectedWalletBase {
            constructor() {
                super(...arguments);
                this.name = name;
                this.walletConnectorFallback = walletConnectorFallback;
                // this is the key from the wallet book entry so that we don't purely rely on the normalized name
                this.overrideKey = key;
            }
            get wallet() {
                return wallet;
            }
            getAddress() {
                const _super = Object.create(null, {
                    getAddress: { get: () => super.getAddress }
                });
                return _tslib.__awaiter(this, void 0, void 0, function* () {
                    var _a;
                    if (this.isInstalledOnBrowser()) {
                        return _super.getAddress.call(this);
                    }
                    const inAppBrowserBase = (_a = this.metadata) === null || _a === void 0 ? void 0 : _a.inAppBrowserUrl;
                    if (!inAppBrowserBase) {
                        const error = new Error(`No inAppBrowserBase found for ${this.name}.`);
                        walletConnectorCore.logger.error(error.message);
                        throw error;
                    }
                    window.location.href = `${inAppBrowserBase}/${window.location.href}`;
                    return undefined;
                });
            }
        };
    });
};

exports.fetchInjectedWalletConnector = fetchInjectedWalletConnector;
exports.injectedWalletOverrides = injectedWalletOverrides;
