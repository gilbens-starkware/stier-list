'use client'
import { RpcProvider } from 'starknet';
import { assertPackageVersion } from '@dynamic-labs/assert-package-version';
import { ChainRpcProviders, ProviderChain } from '@dynamic-labs/rpc-providers';
export * from '@dynamic-labs/rpc-providers';
import { version } from '../package.js';

/* eslint-disable @typescript-eslint/no-namespace */
assertPackageVersion('@dynamic-labs/starknet-core', version);
ChainRpcProviders.getStarknetRpcProviderByChainId = (config, chainId) => {
    var _a;
    const rpcProviders = ChainRpcProviders.getProviders(config);
    const provider = (_a = rpcProviders['starknet']) === null || _a === void 0 ? void 0 : _a.find((rpcProvider) => rpcProvider.chainId === chainId);
    return provider;
};
ChainRpcProviders.registerStarknetProviders = () => {
    ChainRpcProviders.registerChainProviders(ProviderChain.STARKNET, (config) => {
        const rpcProviders = {};
        if (config === null || config === void 0 ? void 0 : config.starknet) {
            const networks = config.starknet;
            rpcProviders.starknet =
                ChainRpcProviders.createProviderFromConfig(networks);
        }
        return rpcProviders.starknet;
    });
};
ChainRpcProviders.createProviderFromConfig = (networks) => networks.map((network) => {
    var _a;
    const rpcUrl = ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
    const provider = new RpcProvider({ nodeUrl: rpcUrl });
    return {
        chainId: network.chainId.toString(),
        chainName: network.name,
        provider,
    };
});
